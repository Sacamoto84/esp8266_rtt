#include <Arduino.h>
#include "define.h"
#include "ESPAsyncUDP.h"
#include "uart.h"
#include "ESP8266WiFi.h"

#include <ArduinoOTA.h>

#include "user_interface.h"
#include "lwip/opt.h"
#include "lwip/inet.h"
#include "lwip/udp.h"
#include "lwip/igmp.h"

#include <stdio.h>
#include <string.h>

AsyncUDP udp;

uart_t* U0;

void parsePacket(AsyncUDPPacket packet);
void TaskReadUART();


int length   = 0;
int rxBytes  = 0;
#define BUF_SIZE 2048
char buf[BUF_SIZE];



void setup() {

  pinMode(EXT_RESET, OUTPUT_OPEN_DRAIN);
  digitalWrite(EXT_RESET, 1); 

  EEPROM.begin(100); 
  //SerialBitrate = 2000000;
  Serial1.begin(SerialBitrate);

  EEPROM_READ_Serial2Bitrate(); //–ü—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑ EEPROM –±–∏—Ç—Ä–µ–π—Ç –¥–ª—è Serial2
  


  EEPROM_READ_ip_client();      //–ß–∏—Ç–∞–µ–º –∏–∑ EEPROM –∞–¥—Ä–µ—Å—Å –∫–ª–∏–µ–Ω—Ç–∞ -> ipchar
  EEPROM_READ_timeout();   //–ü—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑ EEPROM —Ç–∞–π–º–∞—É—Ç
  EEPROM_READ_echo();      //–ü—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑ EEPROM echo
  EEPROM_READ_broadcast(); //–ü—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑ EEPROM broadcast

  EEPROM.get(0, lp);  
  Serial1.print(">EEPROM READ SSID:");  Serial1.println(lp.ssid);  Serial1.print(">EEPROM READ PASS:"); Serial1.println(lp.pass);

  //–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Wifi
  WiFi.mode(WIFI_STA);
  WiFi.begin(lp.ssid, lp.pass);

  int count  = 0;
  bool needAP = false; //–ï—Å–ª–∏ —Å–µ—Ç–∏ –Ω–µ—Ç —Å–æ–∑–¥–∞–µ–º —Ç–æ—á–∫—É –¥–æ—Å—Ç—É–ø–∞
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial1.print(".");
    count++;
    if (count>20)
    {
      //–°–µ—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
      Serial1.println("Wifi STA –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
      needAP = true; //–ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–æ—á–∫—É –¥–æ—Å—Ç—É–ø–∞
      break; //–í—ã—Ö–æ–¥–∏–º
    }
  }

  //–°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫—É –¥–æ—Å—Ç—É–ø–∞
  if (needAP)
  {
    Serial1.println("–ó–∞–ø—É—Å–∫ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞");
    // –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—á–∫—É –¥–æ—Å—Ç—É–ø–∞
    WiFi.mode(WIFI_AP);
    WiFi.softAP("AP ESP32");

    // –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ä—Ç–∞–ª
    portal_start();

    // —Ä–∞–±–æ—Ç–∞ –ø–æ—Ä—Ç–∞–ª–∞
    while (true){portal_tick();}  
  }

  Serial1.println();
  Serial1.print("Connected! Local IP: ");
  Serial1.println(WiFi.localIP());

  //–ø–æ–¥–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
  portal_start();

  if(udp.listen(8889)) {
     Serial.println("udp.listen(8889)");
     udp.onPacket([](AsyncUDPPacket packet) {
      Serial1.println(">–ü—Ä–∏–Ω—è—Ç –ü–∞–∫–µ—Ç");
      if ( strstr((const char*)packet.data(), "Reset") )
      {
        digitalWrite(EXT_RESET, 0); 
        int c = 0;   
        unsigned long timing1;
        timing1 = millis();
        while ((millis() - timing1) < 10)
        {
          c++;
        }
        digitalWrite(EXT_RESET, 1); 
        udp.broadcastTo("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ OK", 8888);
      }
     });
  }

 if (broadcast == 0)
 {
    mString <32> s;
    s += APP_TITLE;
    IPAddress ipclient;
    ipclient.fromString(ipchar);
    udp.writeTo((uint8_t* )s.c_str(), s.length() , ipclient , 8888);      
  }
  else
    udp.broadcastTo(APP_TITLE, 8888);

  ArduinoOTA.begin();

  //Serial2Bitrate = 2000000;
  U0 = uart_init(UART0, Serial2Bitrate, UART_8N2 , UART_RX_ONLY, 0 , SERIAL2_SIZE_RX, 0 );
  uart_swap(U0, 15);

 Serial1.print("U0 RX Beffer Size : ");
 Serial1.println(uart_get_rx_buffer_size(U0));
 
}

unsigned long timing; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ—á–∫–∏ –æ—Ç—Å—á–µ—Ç–∞

void loop() {

  TaskReadUART();

  if (millis() - timing > 1000){ // –í–º–µ—Å—Ç–æ 10000 –ø–æ–¥—Å—Ç–∞–≤—å—Ç–µ –Ω—É–∂–Ω–æ–µ –≤–∞–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—É–∑—ã 
    timing = millis(); 
    portal_tick();
    ArduinoOTA.handle();
  }

  //Serial1.print("342342u56r4544");
}

unsigned long timingReadUART; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ—á–∫–∏ –æ—Ç—Å—á–µ—Ç–∞
unsigned long timingTemp;
void TaskReadUART() {
  
   int avalible = uart_rx_available(U0);
   rxBytes = 0;
   memset(buf,0, BUF_SIZE);

   if ((avalible > 1023) || (millis() - timingReadUART > 50))
   {
     rxBytes = uart_read(U0, &buf[0], avalible);
   }

  if ( (rxBytes > 0) && ( rxBytes != -1 ) && (buf[0] != 0)) 
  {
    timingReadUART = millis();
    all_TX_to_UDP += rxBytes;

    //–ü–æ–∏—â–µ–º –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏
    char str[128];
    memset(str,0, 128);
    for(int i = 0 ; i < 127 ; i++)
    {
      //if (uart_rx_available(U0) == 0)
      //  break;
      int c = uart_read_char(U0);
      if (c == -1) {
         timingTemp = millis();
         while((millis() - timingTemp)< 20)
         {
         }
         if (uart_rx_available(U0) == 0)
           break;
         else
           c = uart_read_char(U0);
      }
      
      str[i] = (char)(c & 0xFF);
      if (str[i] == '\n') break;


    }
    strcat(buf, str);
    
    //Serial.print("‚úÖ !TaskReadUART>> RAW buf >>"); 
    //Serial.println(buf);
    
    if (echo) {
      Serial1.println("üåê >>UDP_tx_task>>–≠—Ö–æ:"); 
      Serial1.println(buf);
    }

    if (broadcast == 0)
    {
      IPAddress ipclient;
      ipclient.fromString(ipchar);
      udp.writeTo((uint8_t* )buf, strlen(buf) , ipclient , 8888); 
    }
    else
      udp.broadcastTo(buf, 8888);  
  } 

}